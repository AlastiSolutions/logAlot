{
  "result": [
    {
      "scriptId": "316",
      "url": "file:///Users/kourosh/Development/AlastiSolutions/logalot/dist/logger.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 6501,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Logger",
          "ranges": [
            {
              "startOffset": 96,
              "endOffset": 427,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getTimestamp",
          "ranges": [
            {
              "startOffset": 432,
              "endOffset": 525,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "hexToRGB",
          "ranges": [
            {
              "startOffset": 530,
              "endOffset": 746,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "applyColor",
          "ranges": [
            {
              "startOffset": 751,
              "endOffset": 855,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "logMessage",
          "ranges": [
            {
              "startOffset": 860,
              "endOffset": 1113,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "log",
          "ranges": [
            {
              "startOffset": 1118,
              "endOffset": 1179,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "warn",
          "ranges": [
            {
              "startOffset": 1184,
              "endOffset": 1247,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "debug",
          "ranges": [
            {
              "startOffset": 1252,
              "endOffset": 1317,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "error",
          "ranges": [
            {
              "startOffset": 1322,
              "endOffset": 1387,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "info",
          "ranges": [
            {
              "startOffset": 1392,
              "endOffset": 1455,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "initLogger",
          "ranges": [
            {
              "startOffset": 1477,
              "endOffset": 1525,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  ],
  "timestamp": 86871.222834,
  "source-map-cache": {
    "file:///Users/kourosh/Development/AlastiSolutions/logalot/dist/logger.js": {
      "lineLengths": [
        13,
        62,
        14,
        26,
        37,
        45,
        45,
        29,
        31,
        33,
        33,
        31,
        10,
        5,
        20,
        70,
        5,
        19,
        50,
        39,
        38,
        31,
        32,
        5,
        32,
        69,
        5,
        32,
        76,
        97,
        43,
        5,
        18,
        40,
        5,
        19,
        41,
        5,
        20,
        42,
        5,
        20,
        42,
        5,
        19,
        41,
        5,
        1,
        33,
        31,
        2,
        29,
        4944
      ],
      "data": {
        "version": 3,
        "file": "/Users/kourosh/Development/AlastiSolutions/logalot/dist/logger.js",
        "sources": [
          "file:///Users/kourosh/Development/AlastiSolutions/logalot/dist/logger.js"
        ],
        "names": [],
        "mappings": "AAAA,YAAY,CAAC;AACb,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,MAAM,MAAM;IACR,YAAY,OAAO;QACf,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;QAC7B,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QACrC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI;YAChC,GAAG,EAAE,OAAO,CAAC,GAAG;YAChB,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,KAAK,EAAE,OAAO,CAAC,KAAK;YACpB,KAAK,EAAE,OAAO,CAAC,KAAK;YACpB,IAAI,EAAE,OAAO,CAAC,IAAI;SACrB,CAAC;IACN,CAAC;IACD,YAAY;QACR,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;IAClE,CAAC;IACD,QAAQ,CAAC,GAAG;QACR,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAC1C,MAAM,CAAC,GAAG,CAAC,MAAM,IAAI,EAAE,CAAC,GAAG,GAAG,CAAC;QAC/B,MAAM,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC;QAC9B,MAAM,CAAC,GAAG,MAAM,GAAG,GAAG,CAAC;QACvB,OAAO,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;IAC5B,CAAC;IACD,UAAU,CAAC,KAAK,EAAE,OAAO;QACrB,OAAO,aAAa,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,OAAO,SAAS,CAAC;IACjE,CAAC;IACD,UAAU,CAAC,KAAK,EAAE,OAAO;QACrB,MAAM,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC;QACpE,MAAM,YAAY,GAAG,GAAG,IAAI,CAAC,YAAY,EAAE,KAAK,KAAK,CAAC,WAAW,EAAE,KAAK,cAAc,EAAE,CAAC;QACzF,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC;IACvC,CAAC;IACD,GAAG,CAAC,OAAO;QACP,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACpC,CAAC;IACD,IAAI,CAAC,OAAO;QACR,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IACrC,CAAC;IACD,KAAK,CAAC,OAAO;QACT,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACtC,CAAC;IACD,KAAK,CAAC,OAAO;QACT,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACtC,CAAC;IACD,IAAI,CAAC,OAAO;QACR,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IACrC,CAAC;CACJ;AACD,MAAM,UAAU,GAAG,CAAC,OAAO,EAAE,EAAE;IAC3B,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC;AAC/B,CAAC,CAAC;AACF,OAAO,CAAC,OAAO,GAAG,UAAU,CAAC",
        "sourcesContent": [
          "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Logger {\n    constructor(options) {\n        this.colors = options.colors;\n        this.timestamps = options.timestamps;\n        this.messages = options.messages || {\n            log: console.log,\n            warn: console.warn,\n            debug: console.debug,\n            error: console.error,\n            info: console.info,\n        };\n    }\n    getTimestamp() {\n        return this.timestamps ? `[${new Date().toISOString()}]` : \"\";\n    }\n    hexToRGB(hex) {\n        const bigInt = parseInt(hex.slice(1), 16);\n        const r = (bigInt >> 16) & 255;\n        const g = (bigInt >> 8) & 255;\n        const b = bigInt & 255;\n        return `${r};${g};${b}`;\n    }\n    applyColor(color, message) {\n        return `\\x1b[38;2;${this.hexToRGB(color)}m${message}\\x1b[0m`;\n    }\n    logMessage(level, message) {\n        const coloredMessage = this.applyColor(this.colors[level], message);\n        const finalMessage = `${this.getTimestamp()} [${level.toUpperCase()}] ${coloredMessage}`;\n        this.messages[level](finalMessage);\n    }\n    log(message) {\n        this.logMessage(\"log\", message);\n    }\n    warn(message) {\n        this.logMessage(\"warn\", message);\n    }\n    debug(message) {\n        this.logMessage(\"debug\", message);\n    }\n    error(message) {\n        this.logMessage(\"error\", message);\n    }\n    info(message) {\n        this.logMessage(\"info\", message);\n    }\n}\nconst initLogger = (options) => {\n    return new Logger(options);\n};\nexports.default = initLogger;\n"
        ],
        "sourceRoot": ""
      }
    }
  }
}
